// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package types

import (
	"fmt"
	"strings"
)

const (
	// SocialMediaPlatformFacebook is a SocialMediaPlatform of type facebook.
	SocialMediaPlatformFacebook SocialMediaPlatform = "facebook"
	// SocialMediaPlatformGithub is a SocialMediaPlatform of type github.
	SocialMediaPlatformGithub SocialMediaPlatform = "github"
	// SocialMediaPlatformGitlab is a SocialMediaPlatform of type gitlab.
	SocialMediaPlatformGitlab SocialMediaPlatform = "gitlab"
	// SocialMediaPlatformLinkedin is a SocialMediaPlatform of type linkedin.
	SocialMediaPlatformLinkedin SocialMediaPlatform = "linkedin"
	// SocialMediaPlatformMastodon is a SocialMediaPlatform of type mastodon.
	SocialMediaPlatformMastodon SocialMediaPlatform = "mastodon"
	// SocialMediaPlatformReddit is a SocialMediaPlatform of type reddit.
	SocialMediaPlatformReddit SocialMediaPlatform = "reddit"
	// SocialMediaPlatformStackoverflow is a SocialMediaPlatform of type stackoverflow.
	SocialMediaPlatformStackoverflow SocialMediaPlatform = "stackoverflow"
	// SocialMediaPlatformXTwitter is a SocialMediaPlatform of type x-twitter.
	SocialMediaPlatformXTwitter SocialMediaPlatform = "x-twitter"
	// SocialMediaPlatformYoutube is a SocialMediaPlatform of type youtube.
	SocialMediaPlatformYoutube SocialMediaPlatform = "youtube"
	// SocialMediaPlatformOther is a SocialMediaPlatform of type other.
	SocialMediaPlatformOther SocialMediaPlatform = "other"
)

var ErrInvalidSocialMediaPlatform = fmt.Errorf("not a valid SocialMediaPlatform, try [%s]", strings.Join(_SocialMediaPlatformNames, ", "))

var _SocialMediaPlatformNames = []string{
	string(SocialMediaPlatformFacebook),
	string(SocialMediaPlatformGithub),
	string(SocialMediaPlatformGitlab),
	string(SocialMediaPlatformLinkedin),
	string(SocialMediaPlatformMastodon),
	string(SocialMediaPlatformReddit),
	string(SocialMediaPlatformStackoverflow),
	string(SocialMediaPlatformXTwitter),
	string(SocialMediaPlatformYoutube),
	string(SocialMediaPlatformOther),
}

// SocialMediaPlatformNames returns a list of possible string values of SocialMediaPlatform.
func SocialMediaPlatformNames() []string {
	tmp := make([]string, len(_SocialMediaPlatformNames))
	copy(tmp, _SocialMediaPlatformNames)
	return tmp
}

// String implements the Stringer interface.
func (x SocialMediaPlatform) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SocialMediaPlatform) IsValid() bool {
	_, err := ParseSocialMediaPlatform(string(x))
	return err == nil
}

var _SocialMediaPlatformValue = map[string]SocialMediaPlatform{
	"facebook":      SocialMediaPlatformFacebook,
	"github":        SocialMediaPlatformGithub,
	"gitlab":        SocialMediaPlatformGitlab,
	"linkedin":      SocialMediaPlatformLinkedin,
	"mastodon":      SocialMediaPlatformMastodon,
	"reddit":        SocialMediaPlatformReddit,
	"stackoverflow": SocialMediaPlatformStackoverflow,
	"x-twitter":     SocialMediaPlatformXTwitter,
	"youtube":       SocialMediaPlatformYoutube,
	"other":         SocialMediaPlatformOther,
}

// ParseSocialMediaPlatform attempts to convert a string to a SocialMediaPlatform.
func ParseSocialMediaPlatform(name string) (SocialMediaPlatform, error) {
	if x, ok := _SocialMediaPlatformValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _SocialMediaPlatformValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return SocialMediaPlatform(""), fmt.Errorf("%s is %w", name, ErrInvalidSocialMediaPlatform)
}
